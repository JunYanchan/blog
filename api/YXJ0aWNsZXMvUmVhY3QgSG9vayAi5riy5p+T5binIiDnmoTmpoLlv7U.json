{"title":"React Hook \"渲染帧\" 的概念","date":"2020-07-08T06:50:40.000Z","date_formatted":{"ll":"Jul 8, 2020","L":"07/08/2020","MM-DD":"07-08"},"link":"articles/React Hook \"渲染帧\" 的概念","updated":"2020-08-07T10:19:40.918Z","content":"<h2 id=\"function-component和class-component之间会存在什么差异？\">function component和class component之间会存在什么差异？<a title=\"#function-component和class-component之间会存在什么差异？\" href=\"#function-component和class-component之间会存在什么差异？\"></a></h2>\n<p>我们看下面两个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Example1</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; count &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handleClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        alert(count);</span><br><span class=\"line\">      &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">          &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;handleClick&#125;&gt;Alert Count&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假如外部有一个父组件包着该子组件，并且有个state count向子组件传递，初始值为0，有个定时器使得count每秒增加1，这时点击“Alert Count”按钮，将会延迟3秒弹出count的值，会发现弹出的值并不是<font color=\"#9966CC\">最新的值</font>，而是触发按钮那个时刻的count值，为什么？请继续往下看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"built_in\">this</span>.props.count);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h2&gt;Example2&lt;/h2&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;<span class=\"built_in\">this</span>.props.count&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"built_in\">this</span>.handleClick&#125;&gt;Alert Count&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们和上面一样做相同的点击操作，点击“Alert Count”按钮，延迟3秒弹出count的值，会发现弹出的值就是页面呈现<font color=\"#9966CC\">最新的值</font></p>\n<h3 id=\"如何理解两者的差异呢？\">如何理解两者的差异呢？<a title=\"#如何理解两者的差异呢？\" href=\"#如何理解两者的差异呢？\"></a></h3>\n<p>在Example2组件中，我们是通过组件<font color=\"#9966CC\">当前实例（this）</font>获取的count，<em><strong>所以不管哪个时间点变化，this的指向还是当前</strong></em>，所以延时器3秒后更新触发渲染，this.props也会跟着更新，所以count拿到的就是最新的值。</p>\n<p>在Example1组件中，由于props是<strong>函数作用域下</strong>的变量，每次触发渲染调用函数时，都会产生一个<strong>新的props变量</strong>，意思就是变量声明时便确认了里面的值，他们之间相互不影响，所以你点击触发时的count就是在那个瞬间的count的变量值，尽管延时多少秒最后弹出的值，还是你触发按钮点击时的count值。</p>\n<h3 id=\"理解上面的例子后，我们再来看下react-hook中的例子\">理解上面的例子后，我们再来看下React Hook中的例子<a title=\"#理解上面的例子后，我们再来看下react-hook中的例子\" href=\"#理解上面的例子后，我们再来看下react-hook中的例子\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Example2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handleClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;</span><br><span class=\"line\">          setCount</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">          Delay setCount</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们现在做一个点击操作：首先点击“Delay setCount”按钮，count依然为0,随后在3秒内连续点击“setCount“按钮两次，会发现count依次变为了1和2，但是3秒过后，count重新变为了1，如果你理解了上面的例子，那么对这个例子产生的结果就不会产生疑问</p>\n<h3 id=\"获取过去或者未来的值\">获取过去或者未来的值<a title=\"#获取过去或者未来的值\" href=\"#获取过去或者未来的值\"></a></h3>\n<p>说回上面的例子，如果我们希望setTimeout回调触发时，返回的count是当前最新的值，该如何去做呢？</p>\n<h4 id=\"方法一:\">方法一:<a title=\"#方法一:\" href=\"#方法一:\"></a></h4>\n<p>利用<font color=\"#9966CC\">传入函数作为参数</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  setCount(<span class=\"function\"><span class=\"params\">prevCount</span> =&gt;</span> prevCount + <span class=\"number\">1</span>); <span class=\"comment\">// 函数的参数prevCount即是前一个状态值</span></span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：\">方法二：<a title=\"#方法二：\" href=\"#方法二：\"></a></h4>\n<p>利用<font color=\"#9966CC\">useRef</font> hook去保存最新的count值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentCount = useRef(count);</span><br><span class=\"line\">  currentCount.current = count;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        setCount(currentCount.current + <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;count&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;</span><br><span class=\"line\">        setCount</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">        Delay setCount</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次组件渲染，把最新的count赋值给currentCount.current，useRef可以产生一个当前组件无论渲染多少遍都可共享的变量，<font color=\"#9966CC\">就类似于class component的this追加属性</font></p>\n<blockquote>\n<p><strong>每次组件函数执行渲染（render）可以理解为每一帧，这样可能比较好理解</strong></p>\n</blockquote>\n<h3 id=\"每一帧也有独立的effects\">每一帧也有独立的Effects<a title=\"#每一帧也有独立的effects\" href=\"#每一帧也有独立的effects\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> setCount(count + <span class=\"number\">1</span>)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子中假如我依次快速点击三次，延时后便会依次打印了1，2，3，都是count递增的效果，这是因为每次render相对独立并且获取了count递增更新后的值</p>\n<blockquote>\n<p><strong>React hook的生命周期和class component生命周期会有所差异，应当抛开在 class 组件中关于生命周期的思维</strong></p>\n</blockquote>\n","plink":"https://junyanchan.github.io/blog/articles/React Hook \"渲染帧\" 的概念/","toc":[{"id":"function-component和class-component之间会存在什么差异？","title":"function component和class component之间会存在什么差异？","index":"1","children":[{"id":"如何理解两者的差异呢？","title":"如何理解两者的差异呢？","index":"1.1"},{"id":"理解上面的例子后，我们再来看下react-hook中的例子","title":"理解上面的例子后，我们再来看下React Hook中的例子","index":"1.2"},{"id":"获取过去或者未来的值","title":"获取过去或者未来的值","index":"1.3"},{"id":"每一帧也有独立的effects","title":"每一帧也有独立的Effects","index":"1.4"}]}]}